Reactor模式的角色构成（Reactor模式一共有5中角色构成）：

1.Handle（句柄或是描述符）：本质上表示一种资源，是有操作系统提供的；该资源用于表示一个个的事件，比如说文件描述符，或是针对网络编程中的Socket描述符。
事件既可以来自于外部，也可以来自于内部；外部事件比如说客户端的连接请求，客户端发送过来数据等；内部事件比如说操作系统产生的定时器事件等。它本质上就是
一个文件描述符。Handle是事件产生的发源地。
2.Synchronous Event Demultiplexer（同步事件分离器）：它本身是一个系统调用，用于等待事件的发生（事件可能是一个，也可能是多个）。调用方在调用它的时
候会被阻塞，一直阻塞到同步事件分离器上有事件产生为止。对于Linux来说，同步事件分离器指的就是常用的I/O多路复用，比如说select、poll、epoll等。在Java
NIO领域中，同步事件分离器对应的组件就是Selector；对应的阻塞方法就是select方法。
3.Event Handler（事件处理器）：本身有多个回调方法构成，这些回调方法构成了应用相关的对于某个事件的反馈机制。Netty相比于Java NIO来说，在事件处理器这
个角色上进行了一个升级，他为我们开发者提供了大量的回调方法，供我们在特定事件产生是实现相应的回调方法进行业务逻辑的处理。
4.Concrete Event Handler（具体事件处理器）：是事件处理器的实现。他本身实现了事件处理器所有提供的各个回调方法，从而实现了特定的业务的逻辑。他本质上
就是我们所编写的一个个的处理器实现。
5.Initiation Dispatcher（初始分发器）：它实际上就是Reactor角色。它本身定义了一些规范，这些规范用于控制事件的调度方式，同时有提供了应用进行事件处理
器的注册、删除等设施。它本身是整个事件处理器的核心所在，Initiation Dispatcher会通过同步事件分离器来等待事件的发生。一旦事件发生，Initiation
Dispatcher首先会分离出每一个事件，然后调用事件处理器，最后调用相关的回调方法来处理这些事件。


--------------------

Reactor模式的流程
1.当应用向Initiation Dispatcher注册具体的事件处理器时，应用会标识出该事件处理器希望Initiation Dispatcher在某个事件发生时向其通知该事件，该事件与
Handle关联
2.Initiation Dispatcher会要求每个事件处理器向其传递内部的Handle。该Handle向操作系统标识了事件处理器。
3.当所有的事件处理器注册完毕后，应用会调用handle_events方法来启动Initiation Dispatcher的事件循环。这时，Initiation Dispatcher会将每个注册的事件
管理器的Handle合并起来，并使用同步事件分离器等待这些事件的发生。比如说，TCP协议层会使用select同步事件分离器操作来等待客户端发送的数据到达连接的
socket handle上
4.当与某个事件源对应的Handle变为ready状态是（比如说，TCP socket变为等待读状态时），同步事件分离器就会通知Initiation Dispatcher。
5.Initiation Dispatcher会触发事件处理器的回调方法，从而相应这个出于ready状态的Handle。当事件发生时，Initiation Dispatcher会将被事件源激活的Handle
作为Key来寻找并分发恰当的事件处理器回调方法。
6.Initiation Dispatcher会回调事件处理器的handle_events回调方法来执行特定于应用的功能（开发者自己所编写的功能），从而相应这个事件。所发生的这个事件类
型可以作为该方法参数并被盖方法内部使用来执行额外的特定于服务的分离与分发。





1.一个EventLoopGroup当中会包含一个或多个EventLoop。
2.一个EventLoop在他的整个生命周期当中都只会与唯一一个Thread进行绑定。
3.所有由EventLoop所处理的各种I/O时间都将在他所关联的那个Thread上进行处理。
4.一个Channel在它的整个生命周期中只会注册在一个EventLoop上。
5.一个EventLoop在运行过程中，会被分配给一个或者多个Channel

netty 的Future继承自jdk的Future
其中提供了isSuccess isCancellable等接口用于准确判断Future运行的情况，其中有提供了观察这模式
通过addListener添加Listener可以不适用get方法获取返回结构，get是阻塞的


JDK所提供的的Future只能通过手工的方式检查执行结果，而这个操作会阻塞的；Netty则对ChannelFuture进行了增强，通过ChannelFutureListener以回调的方式获取
执行结果，去除了手工检查阻塞的操作，值得注意的是：ChannelFutureListener的operationComplete方法是有I/O线程执行的，因此要注意的是不要在这里执行耗时操
作，否则需要通过另外的线程或线程池来执行。










netty特征是异步通讯框架、异步分阻塞、高可用、事件驱动。
netty应用场景
原理。
RPC远程调用框架dubbo底层就是通过netty，netty用的底层是nio。
zk、消息中间件（rocketmq）、主流RPC、通讯都会采用netty。
游戏开发服务器端都是通过netty通讯。
为什么我选择netty 解决Nio代码复杂问题、容错机制、

Nio底层理解？
非阻塞IO阻塞IO、同步-非阻塞对异步-非阻塞

IO与NIO区别

最大区别非阻塞、通道+缓冲区



